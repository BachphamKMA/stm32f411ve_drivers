
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000914  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab8  08000ab8  00010ac0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab8  08000ab8  00010ac0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab8  08000ac0  00010ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab8  08000ab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000abc  08000abc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ac0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ac0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ac0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000157b  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a9  00000000  00000000  0001206b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00012518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  000126b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002627  00000000  00000000  00012810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a45  00000000  00000000  00014e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000098f4  00000000  00000000  0001687c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  000201c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a94 	.word	0x08000a94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a94 	.word	0x08000a94

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <SPI2_GPIOInits>:


#include<string.h>
#include "stm32f411xx.h"

void SPI2_GPIOInits(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <SPI2_GPIOInits+0x3c>)
 80001f0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f6:	2305      	movs	r3, #5
 80001f8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001fa:	2300      	movs	r3, #0
 80001fc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f955 	bl	80004b8 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f94f 	bl	80004b8 <GPIO_Init>

	// NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <SPI2_Inits>:

void SPI2_Inits(){
 8000228:	b580      	push	{r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <SPI2_Inits+0x38>)
 8000230:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // 8Mhz
 800023a:	2302      	movs	r3, #2
 800023c:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 800024a:	2300      	movs	r3, #0
 800024c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800024e:	463b      	mov	r3, r7
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb23 	bl	800089c <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	3720      	adds	r7, #32
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <delay>:
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GpioBtn);
}

void delay(void){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	for (uint32_t i =0 ; i < 500000/2; i++);
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	e002      	b.n	8000276 <delay+0x12>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <delay+0x28>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d9f8      	bls.n	8000270 <delay+0xc>
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	0003d08f 	.word	0x0003d08f

08000290 <main>:

int main (void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 8000296:	4a1f      	ldr	r2, [pc, #124]	; (8000314 <main+0x84>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002a0:	f7ff ffa2 	bl	80001e8 <SPI2_GPIOInits>

	SPI2_Inits();
 80002a4:	f7ff ffc0 	bl	8000228 <SPI2_Inits>
	 * The NSS pin is automatically managed by the hardware
	 * i.e when SPE=1, NSS will be pulled to low
	 * and NSS pin will be high when SPE = 0
	 */

	SPI_SSOEConfig(SPI2,ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	481b      	ldr	r0, [pc, #108]	; (8000318 <main+0x88>)
 80002ac:	f000 fbb1 	bl	8000a12 <SPI_SSOEConfig>
	while(1){

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002b0:	bf00      	nop
 80002b2:	2100      	movs	r1, #0
 80002b4:	4819      	ldr	r0, [pc, #100]	; (800031c <main+0x8c>)
 80002b6:	f000 fa83 	bl	80007c0 <GPIO_ReadFromInputPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f8      	beq.n	80002b2 <main+0x22>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 80002c0:	f7ff ffd0 	bl	8000264 <delay>
			// enable the SPI2 peripheral

			SPI_PeripheralControl(SPI2,ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <main+0x88>)
 80002c8:	f000 fb87 	bl	80009da <SPI_PeripheralControl>
			// first send length information
			uint8_t datalen = strlen(user_data);
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ff82 	bl	80001d8 <strlen>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	70fb      	strb	r3, [r7, #3]
			SPI_SendData(SPI2,&datalen,1);
 80002da:	1cfb      	adds	r3, r7, #3
 80002dc:	2201      	movs	r2, #1
 80002de:	4619      	mov	r1, r3
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <main+0x88>)
 80002e2:	f000 fb43 	bl	800096c <SPI_SendData>
			// to send data
			SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff75 	bl	80001d8 <strlen>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <main+0x88>)
 80002f6:	f000 fb39 	bl	800096c <SPI_SendData>


			while( SPI_Get_Flag_Status(SPI2,SPI_BUSY_FLAG) );
 80002fa:	bf00      	nop
 80002fc:	2180      	movs	r1, #128	; 0x80
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <main+0x88>)
 8000300:	f000 fb20 	bl	8000944 <SPI_Get_Flag_Status>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1f8      	bne.n	80002fc <main+0x6c>


			SPI_PeripheralControl(SPI2,DISABLE);
 800030a:	2100      	movs	r1, #0
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <main+0x88>)
 800030e:	f000 fb64 	bl	80009da <SPI_PeripheralControl>
	while(1){
 8000312:	e7cd      	b.n	80002b0 <main+0x20>
 8000314:	08000aac 	.word	0x08000aac
 8000318:	40003800 	.word	0x40003800
 800031c:	40020000 	.word	0x40020000

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480e      	ldr	r0, [pc, #56]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0b      	ldr	r4, [pc, #44]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

 /* Call the clock system intitialization function.*/
  bl  SystemInit
 800034e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 fb7b 	bl	8000a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff9b 	bl	8000290 <main>

0800035a <LoopForever>:

LoopForever:
    b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	08000ac0 	.word	0x08000ac0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d141      	bne.n	800040e <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a43      	ldr	r2, [pc, #268]	; (800049c <GPIO_PeriClockControl+0x124>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000392:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a42      	ldr	r2, [pc, #264]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800039e:	e077      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a40      	ldr	r2, [pc, #256]	; (80004a4 <GPIO_PeriClockControl+0x12c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ac:	4a3c      	ldr	r2, [pc, #240]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b4:	e06c      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a3b      	ldr	r2, [pc, #236]	; (80004a8 <GPIO_PeriClockControl+0x130>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003be:	4b38      	ldr	r3, [pc, #224]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a37      	ldr	r2, [pc, #220]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ca:	e061      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a37      	ldr	r2, [pc, #220]	; (80004ac <GPIO_PeriClockControl+0x134>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d4:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a31      	ldr	r2, [pc, #196]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e056      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE){
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <GPIO_PeriClockControl+0x138>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ea:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a2c      	ldr	r2, [pc, #176]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 80003f0:	f043 0310 	orr.w	r3, r3, #16
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e04b      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <GPIO_PeriClockControl+0x13c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d147      	bne.n	8000490 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a26      	ldr	r2, [pc, #152]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e040      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a22      	ldr	r2, [pc, #136]	; (800049c <GPIO_PeriClockControl+0x124>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e035      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <GPIO_PeriClockControl+0x12c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000432:	f023 0302 	bic.w	r3, r3, #2
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e02a      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <GPIO_PeriClockControl+0x130>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000448:	f023 0304 	bic.w	r3, r3, #4
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e01f      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a16      	ldr	r2, [pc, #88]	; (80004ac <GPIO_PeriClockControl+0x134>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 800045e:	f023 0308 	bic.w	r3, r3, #8
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e014      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <GPIO_PeriClockControl+0x138>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000474:	f023 0310 	bic.w	r3, r3, #16
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e009      	b.n	8000490 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <GPIO_PeriClockControl+0x13c>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d105      	bne.n	8000490 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <GPIO_PeriClockControl+0x128>)
 800048a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40020000 	.word	0x40020000
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40020400 	.word	0x40020400
 80004a8:	40020800 	.word	0x40020800
 80004ac:	40020c00 	.word	0x40020c00
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40021c00 	.word	0x40021c00

080004b8 <GPIO_Init>:



void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]

	// bat gpio clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff54 	bl	8000378 <GPIO_PeriClockControl>

	// 1. Cài đặt chế độ cho gpio pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d821      	bhi.n	800051c <GPIO_Init+0x64>

		// dưới chế độ Analog thì không phải là chế độ ngắt

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	461a      	mov	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing đảo "~" của 0x3(11) là (00) để reset trạng thái
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2303      	movs	r3, #3
 80004f8:	408b      	lsls	r3, r1
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e0a1      	b.n	8000660 <GPIO_Init+0x1a8>
	}else{

		// chế độ ngắt
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d117      	bne.n	8000554 <GPIO_Init+0x9c>
			//1.Configure the FTSR
			EXTI->FTSR  |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000524:	4b9d      	ldr	r3, [pc, #628]	; (800079c <GPIO_Init+0x2e4>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	2201      	movs	r2, #1
 8000530:	408a      	lsls	r2, r1
 8000532:	4611      	mov	r1, r2
 8000534:	4a99      	ldr	r2, [pc, #612]	; (800079c <GPIO_Init+0x2e4>)
 8000536:	430b      	orrs	r3, r1
 8000538:	60d3      	str	r3, [r2, #12]
			// CLEAR the corresponding RTSR bit
			EXTI->RTSR  &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053a:	4b98      	ldr	r3, [pc, #608]	; (800079c <GPIO_Init+0x2e4>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	7912      	ldrb	r2, [r2, #4]
 8000542:	4611      	mov	r1, r2
 8000544:	2201      	movs	r2, #1
 8000546:	408a      	lsls	r2, r1
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a93      	ldr	r2, [pc, #588]	; (800079c <GPIO_Init+0x2e4>)
 800054e:	400b      	ands	r3, r1
 8000550:	6093      	str	r3, [r2, #8]
 8000552:	e035      	b.n	80005c0 <GPIO_Init+0x108>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b05      	cmp	r3, #5
 800055a:	d117      	bne.n	800058c <GPIO_Init+0xd4>
			//1.Configure the RTSR
			EXTI->RTSR  |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b8f      	ldr	r3, [pc, #572]	; (800079c <GPIO_Init+0x2e4>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a8b      	ldr	r2, [pc, #556]	; (800079c <GPIO_Init+0x2e4>)
 800056e:	430b      	orrs	r3, r1
 8000570:	6093      	str	r3, [r2, #8]
			// CLEAR the corresponding RTSR bit
			EXTI->FTSR  &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000572:	4b8a      	ldr	r3, [pc, #552]	; (800079c <GPIO_Init+0x2e4>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	43d2      	mvns	r2, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a85      	ldr	r2, [pc, #532]	; (800079c <GPIO_Init+0x2e4>)
 8000586:	400b      	ands	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
 800058a:	e019      	b.n	80005c0 <GPIO_Init+0x108>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	2b06      	cmp	r3, #6
 8000592:	d115      	bne.n	80005c0 <GPIO_Init+0x108>
			//1.Configure the RTSR and FTSR
			EXTI->RTSR  |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b81      	ldr	r3, [pc, #516]	; (800079c <GPIO_Init+0x2e4>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a7d      	ldr	r2, [pc, #500]	; (800079c <GPIO_Init+0x2e4>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
			// CLEAR the corresponding RTSR bit
			EXTI->FTSR  |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b7c      	ldr	r3, [pc, #496]	; (800079c <GPIO_Init+0x2e4>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a78      	ldr	r2, [pc, #480]	; (800079c <GPIO_Init+0x2e4>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	089b      	lsrs	r3, r3, #2
 80005c6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a72      	ldr	r2, [pc, #456]	; (80007a0 <GPIO_Init+0x2e8>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d024      	beq.n	8000626 <GPIO_Init+0x16e>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a70      	ldr	r2, [pc, #448]	; (80007a4 <GPIO_Init+0x2ec>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d01d      	beq.n	8000622 <GPIO_Init+0x16a>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a6f      	ldr	r2, [pc, #444]	; (80007a8 <GPIO_Init+0x2f0>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d016      	beq.n	800061e <GPIO_Init+0x166>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a6d      	ldr	r2, [pc, #436]	; (80007ac <GPIO_Init+0x2f4>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d00f      	beq.n	800061a <GPIO_Init+0x162>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a6c      	ldr	r2, [pc, #432]	; (80007b0 <GPIO_Init+0x2f8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d008      	beq.n	8000616 <GPIO_Init+0x15e>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a6a      	ldr	r2, [pc, #424]	; (80007b4 <GPIO_Init+0x2fc>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d101      	bne.n	8000612 <GPIO_Init+0x15a>
 800060e:	2305      	movs	r3, #5
 8000610:	e00a      	b.n	8000628 <GPIO_Init+0x170>
 8000612:	2300      	movs	r3, #0
 8000614:	e008      	b.n	8000628 <GPIO_Init+0x170>
 8000616:	2304      	movs	r3, #4
 8000618:	e006      	b.n	8000628 <GPIO_Init+0x170>
 800061a:	2303      	movs	r3, #3
 800061c:	e004      	b.n	8000628 <GPIO_Init+0x170>
 800061e:	2302      	movs	r3, #2
 8000620:	e002      	b.n	8000628 <GPIO_Init+0x170>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <GPIO_Init+0x170>
 8000626:	2300      	movs	r3, #0
 8000628:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <GPIO_Init+0x300>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a62      	ldr	r2, [pc, #392]	; (80007b8 <GPIO_Init+0x300>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000636:	7c7a      	ldrb	r2, [r7, #17]
 8000638:	7cbb      	ldrb	r3, [r7, #18]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	fa02 f103 	lsl.w	r1, r2, r3
 8000640:	4a5e      	ldr	r2, [pc, #376]	; (80007bc <GPIO_Init+0x304>)
 8000642:	7cfb      	ldrb	r3, [r7, #19]
 8000644:	3302      	adds	r3, #2
 8000646:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. configure the exti interrupt delivery using IMR
		EXTI->IMR |=  1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800064a:	4b54      	ldr	r3, [pc, #336]	; (800079c <GPIO_Init+0x2e4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a50      	ldr	r2, [pc, #320]	; (800079c <GPIO_Init+0x2e4>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
	}

		temp = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	// 2. Cài đặt tốc độ
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	799b      	ldrb	r3, [r3, #6]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	4619      	mov	r1, r3
 8000682:	2303      	movs	r3, #3
 8000684:	408b      	lsls	r3, r1
 8000686:	43db      	mvns	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	400a      	ands	r2, r1
 8000690:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6899      	ldr	r1, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	430a      	orrs	r2, r1
 80006a0:	609a      	str	r2, [r3, #8]
		temp = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	// 3. Cài đặt kéo lên hay kéo xuống

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	4619      	mov	r1, r3
 80006c4:	2303      	movs	r3, #3
 80006c6:	408b      	lsls	r3, r1
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68d9      	ldr	r1, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	60da      	str	r2, [r3, #12]
		temp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
	// 4. Cài đặt đầu ra
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	4619      	mov	r1, r3
 8000704:	2303      	movs	r3, #3
 8000706:	408b      	lsls	r3, r1
 8000708:	43db      	mvns	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	400a      	ands	r2, r1
 8000712:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6859      	ldr	r1, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	430a      	orrs	r2, r1
 8000722:	605a      	str	r2, [r3, #4]

		temp = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
	// 5. Cài đặt các chức năng khác
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	795b      	ldrb	r3, [r3, #5]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d131      	bne.n	8000794 <GPIO_Init+0x2dc>
			// cài đặt thanh ghi chức năng khác
			uint8_t temp1, temp2;
			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2) ); // clearing
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	7c3a      	ldrb	r2, [r7, #16]
 8000748:	3208      	adds	r2, #8
 800074a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	220f      	movs	r2, #15
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	7c3a      	ldrb	r2, [r7, #16]
 8000762:	4001      	ands	r1, r0
 8000764:	3208      	adds	r2, #8
 8000766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7c3a      	ldrb	r2, [r7, #16]
 8000770:	3208      	adds	r2, #8
 8000772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a5b      	ldrb	r3, [r3, #9]
 800077a:	461a      	mov	r2, r3
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	4618      	mov	r0, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	7c3a      	ldrb	r2, [r7, #16]
 800078c:	4301      	orrs	r1, r0
 800078e:	3208      	adds	r2, #8
 8000790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40013c00 	.word	0x40013c00
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021c00 	.word	0x40021c00
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40013800 	.word	0x40013800

080007c0 <GPIO_ReadFromInputPin>:
 * @return			-		0 or 1
 *
 * @Note			-
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) (( pGPIOx->IDR >> PinNumber) & 0x00000001 ); // dich phải để lấy bit ở LSB
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691a      	ldr	r2, [r3, #16]
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	fa22 f303 	lsr.w	r3, r2, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
	return value;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SPI_PeriClockControl>:

static void spi_txe_interrupt_handle(SPI_Handle_t *pHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pHandle);

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d120      	bne.n	8000840 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <SPI_PeriClockControl+0xa0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		}else if (pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000812:	e035      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <SPI_PeriClockControl+0xa8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	e02a      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <SPI_PeriClockControl+0xac>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d126      	bne.n	8000880 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083e:	e01f      	b.n	8000880 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <SPI_PeriClockControl+0xa0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d106      	bne.n	8000856 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800084e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000854:	e014      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <SPI_PeriClockControl+0xa8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
}
 800086a:	e009      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SPI_PeriClockControl+0xac>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d105      	bne.n	8000880 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800087a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40013000 	.word	0x40013000
 8000890:	40023800 	.word	0x40023800
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00

0800089c <SPI_Init>:


/*
 * Init và Deinit
 */
void SPI_Init(SPI_Handle_t*pSPIHandle){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff9e 	bl	80007ec <SPI_PeriClockControl>

	// Config cho thanh ghi SPI_CR1


	uint32_t tempreg = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d104      	bne.n	80008d4 <SPI_Init+0x38>
		//BIDI mode should be cleared
		tempreg &= ~(1 << 15);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e014      	b.n	80008fe <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d104      	bne.n	80008e6 <SPI_Init+0x4a>
		// bidi mode should be set
		tempreg |= 	(1 << 15);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e00b      	b.n	80008fe <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	795b      	ldrb	r3, [r3, #5]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d107      	bne.n	80008fe <SPI_Init+0x62>
		// bidi mode should be cleared
		tempreg &= ~(1 << 15);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008f4:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << 10);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fc:	60fb      	str	r3, [r7, #12]
	}


	// 3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	461a      	mov	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4313      	orrs	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

	// 4. configure the DFF

	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	79db      	ldrb	r3, [r3, #7]
 8000910:	02db      	lsls	r3, r3, #11
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]

	// 5. configure the CPOL

	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7a1b      	ldrb	r3, [r3, #8]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]


	// 6. configure the CPHA

	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7a5b      	ldrb	r3, [r3, #9]
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	601a      	str	r2, [r3, #0]


}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SPI_Get_Flag_Status>:
void SPI_DeInint(SPI_RegDef_t *pSPIx){
	// TO DO
}

uint8_t SPI_Get_Flag_Status(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4013      	ands	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SPI_Get_Flag_Status+0x1a>
	{
		return FLAG_SET;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <SPI_Get_Flag_Status+0x1c>

	}
	return FLAG_RESET;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SPI_SendData>:

/*
 * Data send and receive
 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	while (Len > 0){
 8000978:	e027      	b.n	80009ca <SPI_SendData+0x5e>
		//1. wait until TXE is set
		while (SPI_Get_Flag_Status(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 800097a:	bf00      	nop
 800097c:	2102      	movs	r1, #2
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff ffe0 	bl	8000944 <SPI_Get_Flag_Status>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f8      	beq.n	800097c <SPI_SendData+0x10>


		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00e      	beq.n	80009b4 <SPI_SendData+0x48>
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =  *((uint16_t*)pTxBuffer);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	60da      	str	r2, [r3, #12]
			Len --;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
			Len --;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	e00a      	b.n	80009ca <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	60da      	str	r2, [r3, #12]
			Len--;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
	while (Len > 0){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1d4      	bne.n	800097a <SPI_SendData+0xe>
		}
	}
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <SPI_PeripheralControl>:
				pRxBuffer++;
			}
		}
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f043 0210 	orr.w	r2, r3, #16
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	601a      	str	r2, [r3, #0]

	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009f8:	e005      	b.n	8000a06 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 0210 	bic.w	r2, r3, #16
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SPI_SSOEConfig>:
		{
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
		}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <SPI_SSOEConfig+0x20>
		{
			pSPIx->CR2 |= (1 << SPI_CR1_SSI);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	605a      	str	r2, [r3, #4]
		}
	else
		{
			pSPIx->CR2 &= ~(1 << SPI_CR1_SSI);
		}
}
 8000a30:	e005      	b.n	8000a3e <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR1_SSI);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	605a      	str	r2, [r3, #4]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <__libc_init_array>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	4d0d      	ldr	r5, [pc, #52]	; (8000a84 <__libc_init_array+0x38>)
 8000a50:	4c0d      	ldr	r4, [pc, #52]	; (8000a88 <__libc_init_array+0x3c>)
 8000a52:	1b64      	subs	r4, r4, r5
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	2600      	movs	r6, #0
 8000a58:	42a6      	cmp	r6, r4
 8000a5a:	d109      	bne.n	8000a70 <__libc_init_array+0x24>
 8000a5c:	4d0b      	ldr	r5, [pc, #44]	; (8000a8c <__libc_init_array+0x40>)
 8000a5e:	4c0c      	ldr	r4, [pc, #48]	; (8000a90 <__libc_init_array+0x44>)
 8000a60:	f000 f818 	bl	8000a94 <_init>
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	10a4      	asrs	r4, r4, #2
 8000a68:	2600      	movs	r6, #0
 8000a6a:	42a6      	cmp	r6, r4
 8000a6c:	d105      	bne.n	8000a7a <__libc_init_array+0x2e>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a74:	4798      	blx	r3
 8000a76:	3601      	adds	r6, #1
 8000a78:	e7ee      	b.n	8000a58 <__libc_init_array+0xc>
 8000a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7e:	4798      	blx	r3
 8000a80:	3601      	adds	r6, #1
 8000a82:	e7f2      	b.n	8000a6a <__libc_init_array+0x1e>
 8000a84:	08000ab8 	.word	0x08000ab8
 8000a88:	08000ab8 	.word	0x08000ab8
 8000a8c:	08000ab8 	.word	0x08000ab8
 8000a90:	08000abc 	.word	0x08000abc

08000a94 <_init>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	bf00      	nop
 8000a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	4770      	bx	lr

08000aa0 <_fini>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	bf00      	nop
 8000aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa6:	bc08      	pop	{r3}
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	4770      	bx	lr
